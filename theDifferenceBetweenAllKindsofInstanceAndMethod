"""
#属性

class A(object):
    # 定义一个属性，类属性。直接在类中定义的属性是雷属性
    # 类属性可以通过类或者类的实例访问到 参考line11-14
    # 类属性只能通过类对象来修改，line16，无法通过实例对象修改
    # 实例对象只会添加属性，把之前的覆盖掉
    count = 0

a = A()
#a.count = 10 # 向实例里添加一个count属性。如果打印，实例里的属性会覆盖类属性。这是实例属性
print(A.count) # 0
print(a.count) # 0有可能得到10

A.count = 100
print(A.count) # 0
print(a.count) # 0有可能得到10
"""
"""
#实例对象

class A(object):
    # 定义一个属性，类属性。直接在类中定义的属性是雷属性
    # 类属性可以通过类或者类的实例访问到 参考line8-10
    # 类属性只能通过类对象来修改，line15，无法通过实例对象修改
    # 实例对象只会添加属性，把之前的覆盖掉
    count = 0
    def __init__(self):
        # 这也是一个实例属性，因为self表示当前对象
        # 实例对象只能通过实例对象来访问和修改，无法通过类对象来访问和修改
        self.name = "Aaxxxx"
    # 这是实例方法
    # 实例方法是在类中直接定义的
    # 以self为第一个参数的方法
    # 实例方法在调用时，python会将调用对象作为self传入
    # 实例方法可以通过实例和类调用
    #   当通过实例调用时，会自动将当前调用对象作为self传入
    #   当通过类调用时，不会自动传递self，只能手动传递self
    def test(self):
        print("这是test方法")
        print(self)

a = A()
print(a.name) #这种方法可以访问到
#print(A.name) #这种方法不能访问到，会报错
a.test() #等价于
A.test(a) #报错，要在括号里加a
# 开发的时候，如果所有东西都共享的属性可以写成类属性
# 如果是私有的，只有当前对象使用，就用实例属性
"""
"""
# 类方法
class A(object):
    # 定义一个属性，类属性。直接在类中定义的属性是雷属性
    # 类属性可以通过类或者类的实例访问到 参考line8-10
    # 类属性只能通过类对象来修改，line15，无法通过实例对象修改
    # 实例对象只会添加属性，把之前的覆盖掉
    count = 0
    def __init__(self):
        # 这也是一个实例属性，因为self表示当前对象
        # 实例对象只能通过实例对象来访问和修改，无法通过类对象来访问和修改
        self.name = "Aaxxxx"
    # 这是实例方法
    # 实例方法是在类中直接定义的
    # 以self为第一个参数的方法
    # 实例方法在调用时，python会将调用对象作为self传入
    # 实例方法可以通过实例和类调用
    #   当通过实例调用时，会自动将当前调用对象作为self传入
    #   当通过类调用时，不会自动传递self，只能手动传递self
    def test(self):
        print("这是test方法")
        print(self)

    # 在类内部使用 @classmethod来修饰的方法属于类方法
    #   类方法的第一个参数是cls，也会被自动传递，cls就是当前的类对象
    #   类方法可以通过类调用，也可以通过实例调用，没有区别
    @classmethod
    def test_2(cls): #cls是class的简写
        print("这是test2方法,一个类方法",cls)
        print(cls.count) # 通过cls操作类中的类属性

a = A
a.test_2() # 等价于
A.test_2() # 这是test2方法,一个类方法 <class '__main__.A'>

# 什么时候使用实例，什么时候使用类方法
# 需要self用实例，需要类的时候用class_method，主要以实例为主
"""
# 静态方法
class A(object):
    # 定义一个属性，类属性。直接在类中定义的属性是雷属性
    # 类属性可以通过类或者类的实例访问到 参考line8-10
    # 类属性只能通过类对象来修改，line15，无法通过实例对象修改
    # 实例对象只会添加属性，把之前的覆盖掉
    count = 0
    def __init__(self):
        # 这也是一个实例属性，因为self表示当前对象
        # 实例对象只能通过实例对象来访问和修改，无法通过类对象来访问和修改
        self.name = "Aaxxxx"
    # 这是实例方法
    # 实例方法是在类中直接定义的
    # 以self为第一个参数的方法
    # 实例方法在调用时，python会将调用对象作为self传入
    # 实例方法可以通过实例和类调用
    #   当通过实例调用时，会自动将当前调用对象作为self传入
    #   当通过类调用时，不会自动传递self，只能手动传递self
    def test(self):
        print("这是test方法")
        print(self)

    # 在类内部使用 @classmethod来修饰的方法属于类方法
    #   类方法的第一个参数是cls，也会被自动传递，cls就是当前的类对象
    #   类方法可以通过类调用，也可以通过实例调用，没有区别
    @classmethod
    def test_2(cls): #cls是class的简写
        print("这是test2方法,一个类方法",cls)
        print(cls.count) # 通过cls操作类中的类属性

    # 在类中使用@staticmethod来修饰的方法属于静态方法
    # 静态方法不需要指定任何默认参数
    # 静态方法可以通过类和实例调用
    # 静态方法基本上是与当前类无关的方法。静态方法就是一个保存在当前类中的函数
    # 静态方法一般都是工具方法， 与当前类无关
    # 当一个方法没有地方放的时候，就可以把他变成一个静态方法
    # 静态方法和函数的区别，静态方法必须通过一个东西去调用，可以通过类去调用，可以通过实例去调用，
    #   但是不能像函数一样直接去调用
    # 静态方法使用的不多
    @staticmethod
    def test_3():
        print("test3 runs.")

a = A()

A.test_3()
a.test_3()
